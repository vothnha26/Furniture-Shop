package com.noithat.qlnt.backend.controller;

import com.noithat.qlnt.backend.entity.KiemKeKho;
import com.noithat.qlnt.backend.entity.KiemKeChiTiet;
import com.noithat.qlnt.backend.service.IQuanLyKiemKeService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

@RestController
@RequestMapping("/api/v1/quan-ly-kiem-ke")
public class QuanLyKiemKeController {

    @Autowired
    private IQuanLyKiemKeService quanLyKiemKeService;

    // =================== INVENTORY CHECK OPERATIONS ===================

    /**
     * T·∫°o phi·∫øu ki·ªÉm k√™ m·ªõi
     * POST /api/v1/quan-ly-kiem-ke/tao-kiem-ke
     */
    // [ƒê√É S·ª¨A] ƒê∆∞·ªùng d·∫´n t·ª´ "/create" -> "/tao-kiem-ke"
    @PostMapping("/tao-kiem-ke")
    public ResponseEntity<Map<String, Object>> createInventoryCheck(@RequestBody Map<String, Object> request) {
        Map<String, Object> response = new HashMap<>();
        try {
            String tenKiemKe = (String) request.get("tenKiemKe");
            String moTa = (String) request.get("moTa");
            String nguoiTao = (String) request.get("nguoiTao");

            KiemKeKho kiemKeKho = quanLyKiemKeService.createInventoryCheck(tenKiemKe, moTa, nguoiTao);
            
            response.put("success", true);
            response.put("message", "T·∫°o phi·∫øu ki·ªÉm k√™ th√†nh c√¥ng");
            response.put("data", kiemKeKho);
            return ResponseEntity.ok(response);
        } catch (Exception e) {
            response.put("success", false);
            response.put("message", "L·ªói: " + e.getMessage());
            return ResponseEntity.internalServerError().body(response);
        }
    }

    /**
     * T·∫°o ki·ªÉm k√™ to√†n b·ªô kho
     * POST /api/v1/quan-ly-kiem-ke/tao-kiem-ke-toan-bo
     */
    // [ƒê√É S·ª¨A] ƒê∆∞·ªùng d·∫´n t·ª´ "/create-full" -> "/tao-kiem-ke-toan-bo"
    @PostMapping("/tao-kiem-ke-toan-bo")
    public ResponseEntity<Map<String, Object>> createFullInventoryCheck(@RequestBody Map<String, Object> request) {
        Map<String, Object> response = new HashMap<>();
        try {
            String tenKiemKe = (String) request.get("tenKiemKe");
            String nguoiTao = (String) request.get("nguoiTao");

            KiemKeKho kiemKeKho = quanLyKiemKeService.createFullInventoryCheck(tenKiemKe, nguoiTao);

            response.put("success", true);
            response.put("message", "T·∫°o ki·ªÉm k√™ to√†n b·ªô kho th√†nh c√¥ng");
            response.put("data", kiemKeKho);
            return ResponseEntity.ok(response);
        } catch (Exception e) {
            response.put("success", false);
            response.put("message", "L·ªói: " + e.getMessage());
            return ResponseEntity.internalServerError().body(response);
        }
    }

    /**
     * Th√™m s·∫£n ph·∫©m v√†o phi·∫øu ki·ªÉm k√™
     * POST /api/v1/quan-ly-kiem-ke/them-san-pham
     */
    // [ƒê√É S·ª¨A] ƒê∆∞·ªùng d·∫´n v√† c·∫•u tr√∫c request
    @PostMapping("/them-san-pham")
    public ResponseEntity<Map<String, Object>> addProductToInventoryCheck(@RequestBody Map<String, Object> request) {
        Map<String, Object> response = new HashMap<>();
        try {
            // üîπ Validation: Check for required fields
            if (!request.containsKey("maKiemKe")) {
                response.put("success", false);
                response.put("message", "Thi·∫øu tr∆∞·ªùng b·∫Øt bu·ªôc: maKiemKe");
                return ResponseEntity.badRequest().body(response);
            }
            
            if (!request.containsKey("maBienThe")) {
                response.put("success", false);
                response.put("message", "Thi·∫øu tr∆∞·ªùng b·∫Øt bu·ªôc: maBienThe");
                return ResponseEntity.badRequest().body(response);
            }
            
            Integer maKiemKe = parseInteger(request.get("maKiemKe"));
            Integer maBienThe = parseInteger(request.get("maBienThe"));
            
            // üîπ Validation: Check parsed values
            if (maKiemKe == null) {
                response.put("success", false);
                response.put("message", "Gi√° tr·ªã maKiemKe kh√¥ng h·ª£p l·ªá");
                return ResponseEntity.badRequest().body(response);
            }
            
            if (maBienThe == null) {
                response.put("success", false);
                response.put("message", "Gi√° tr·ªã maBienThe kh√¥ng h·ª£p l·ªá");
                return ResponseEntity.badRequest().body(response);
            }

            boolean success = quanLyKiemKeService.addProductToInventoryCheck(maKiemKe, maBienThe);

            if (success) {
                response.put("success", true);
                response.put("message", "Th√™m s·∫£n ph·∫©m v√†o phi·∫øu ki·ªÉm k√™ th√†nh c√¥ng");
                return ResponseEntity.ok(response);
            } else {
                // Ki·ªÉm tra chi ti·∫øt l·ªói ƒë·ªÉ tr·∫£ v·ªÅ message r√µ r√†ng h∆°n
                response.put("success", false);
                response.put("message", "Th√™m s·∫£n ph·∫©m th·∫•t b·∫°i. Vui l√≤ng ki·ªÉm tra: " +
                    "1) Phi·∫øu ki·ªÉm k√™ c√≥ t·ªìn t·∫°i kh√¥ng, " +
                    "2) Bi·∫øn th·ªÉ s·∫£n ph·∫©m c√≥ t·ªìn t·∫°i kh√¥ng, " +
                    "3) Phi·∫øu ki·ªÉm k√™ c√≥ ƒëang ·ªü tr·∫°ng th√°i 'DANG_CHUAN_BI' kh√¥ng, " +
                    "4) S·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c th√™m v√†o phi·∫øu ki·ªÉm k√™ n√†y ch∆∞a");
                return ResponseEntity.badRequest().body(response);
            }
        } catch (Exception e) {
            response.put("success", false);
            response.put("message", "L·ªói: " + e.getMessage());
            return ResponseEntity.internalServerError().body(response);
        }
    }

    /**
     * B·∫Øt ƒë·∫ßu ki·ªÉm k√™
     * PUT /api/v1/quan-ly-kiem-ke/bat-dau-kiem-ke/{maKiemKe}
     */
    // [ƒê√É S·ª¨A] Ph∆∞∆°ng th·ª©c POST -> PUT v√† ƒë∆∞·ªùng d·∫´n
    @PutMapping("/bat-dau-kiem-ke/{maKiemKe}")
    public ResponseEntity<Map<String, Object>> startInventoryCheck(@PathVariable Integer maKiemKe) {
        Map<String, Object> response = new HashMap<>();
        try {
            boolean success = quanLyKiemKeService.startInventoryCheck(maKiemKe);
            if (success) {
                response.put("success", true);
                response.put("message", "B·∫Øt ƒë·∫ßu ki·ªÉm k√™ th√†nh c√¥ng");
                return ResponseEntity.ok(response);
            } else {
                response.put("success", false);
                response.put("message", "Kh√¥ng th·ªÉ b·∫Øt ƒë·∫ßu ki·ªÉm k√™");
                return ResponseEntity.badRequest().body(response);
            }
        } catch (Exception e) {
            response.put("success", false);
            response.put("message", "L·ªói: " + e.getMessage());
            return ResponseEntity.internalServerError().body(response);
        }
    }

    /**
     * C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng th·ª±c t·∫ø ki·ªÉm k√™
     * PUT /api/v1/quan-ly-kiem-ke/cap-nhat-so-luong-thuc-te
     */
    // [ƒê√É S·ª¨A] ƒê∆∞·ªùng d·∫´n v√† c·∫•u tr√∫c request
    @PutMapping("/cap-nhat-so-luong-thuc-te")
    public ResponseEntity<Map<String, Object>> updateActualQuantity(@RequestBody Map<String, Object> request) {
        Map<String, Object> response = new HashMap<>();
        try {
            // üîπ Validation: Check for required fields
            if (!request.containsKey("maKiemKeChiTiet")) {
                response.put("success", false);
                response.put("message", "Thi·∫øu tr∆∞·ªùng b·∫Øt bu·ªôc: maKiemKeChiTiet");
                return ResponseEntity.badRequest().body(response);
            }
            
            if (!request.containsKey("soLuongThucTe")) {
                response.put("success", false);
                response.put("message", "Thi·∫øu tr∆∞·ªùng b·∫Øt bu·ªôc: soLuongThucTe");
                return ResponseEntity.badRequest().body(response);
            }
            
            Integer maKiemKeChiTiet = parseInteger(request.get("maKiemKeChiTiet"));
            Integer soLuongThucTe = parseInteger(request.get("soLuongThucTe"));
            
            // üîπ Validation: Check parsed values
            if (maKiemKeChiTiet == null) {
                response.put("success", false);
                response.put("message", "Gi√° tr·ªã maKiemKeChiTiet kh√¥ng h·ª£p l·ªá");
                return ResponseEntity.badRequest().body(response);
            }
            
            if (soLuongThucTe == null) {
                response.put("success", false);
                response.put("message", "Gi√° tr·ªã soLuongThucTe kh√¥ng h·ª£p l·ªá");
                return ResponseEntity.badRequest().body(response);
            }
            
            String nguoiKiemKe = request.get("nguoiKiemKe") != null ? request.get("nguoiKiemKe").toString() : null;
            String lyDoChenhLech = request.get("lyDoChenhLech") != null ? request.get("lyDoChenhLech").toString() : null;

            boolean success = quanLyKiemKeService.updateActualQuantity(maKiemKeChiTiet, soLuongThucTe, nguoiKiemKe, lyDoChenhLech);

            if (success) {
                response.put("success", true);
                response.put("message", "C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng th·ª±c t·∫ø th√†nh c√¥ng");
                return ResponseEntity.ok(response);
            } else {
                response.put("success", false);
                response.put("message", "C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng th·∫•t b·∫°i");
                return ResponseEntity.badRequest().body(response);
            }
        } catch (Exception e) {
            response.put("success", false);
            response.put("message", "L·ªói: " + e.getMessage());
            return ResponseEntity.internalServerError().body(response);
        }
    }

    // Backwards-compatible: accept POST or PUT at /cap-nhat-so-luong
    @RequestMapping(value = "/cap-nhat-so-luong", method = {RequestMethod.PUT, RequestMethod.POST})
    public ResponseEntity<Map<String, Object>> updateActualQuantityAlias(@RequestBody Map<String, Object> request) {
        return updateActualQuantity(request);
    }

    /**
     * Ho√†n th√†nh ki·ªÉm k√™ v√† √°p d·ª•ng k·∫øt qu·∫£
     * PUT /api/v1/quan-ly-kiem-ke/hoan-thanh-kiem-ke
     */
    // [ƒê√É S·ª¨A] Ph∆∞∆°ng th·ª©c POST -> PUT, ƒë∆∞·ªùng d·∫´n v√† c·∫•u tr√∫c request
    @PutMapping("/hoan-thanh-kiem-ke")
    public ResponseEntity<Map<String, Object>> completeInventoryCheck(@RequestBody Map<String, Object> request) {
        Map<String, Object> response = new HashMap<>();
        try {
            Integer maKiemKe = parseInteger(request.get("maKiemKe"));
            String nguoiDuyet = request.get("nguoiDuyet") != null ? request.get("nguoiDuyet").toString() : null;
            Boolean applyChanges = parseBoolean(request.getOrDefault("applyChanges", Boolean.TRUE));

            boolean success = quanLyKiemKeService.completeInventoryCheck(maKiemKe, nguoiDuyet, applyChanges);

            if (success) {
                String message = applyChanges ? "Ho√†n th√†nh ki·ªÉm k√™ v√† √°p d·ª•ng thay ƒë·ªïi th√†nh c√¥ng" : "Ho√†n th√†nh ki·ªÉm k√™ th√†nh c√¥ng (kh√¥ng √°p d·ª•ng thay ƒë·ªïi)";
                response.put("success", true);
                response.put("message", message);
                return ResponseEntity.ok(response);
            } else {
                response.put("success", false);
                response.put("message", "Ho√†n th√†nh ki·ªÉm k√™ th·∫•t b·∫°i");
                return ResponseEntity.badRequest().body(response);
            }
        } catch (Exception e) {
            response.put("success", false);
            response.put("message", "L·ªói: " + e.getMessage());
            return ResponseEntity.internalServerError().body(response);
        }
    }

    // Backwards-compatible: accept POST/PUT at /hoan-thanh (legacy path used by some clients)
    @RequestMapping(value = "/hoan-thanh", method = {RequestMethod.PUT, RequestMethod.POST})
    public ResponseEntity<Map<String, Object>> completeInventoryCheckAlias(@RequestBody Map<String, Object> request) {
        return completeInventoryCheck(request);
    }

    // Helper: robustly parse integer-like values from request maps (Number or String)
    private Integer parseInteger(Object value) {
        if (value == null) return null;
        if (value instanceof Integer) return (Integer) value;
        if (value instanceof Number) return ((Number) value).intValue();
        try {
            return Integer.valueOf(value.toString());
        } catch (NumberFormatException e) {
            return null;
        }
    }

    // Helper: robustly parse boolean-like values
    private Boolean parseBoolean(Object value) {
        if (value == null) return null;
        if (value instanceof Boolean) return (Boolean) value;
        String s = value.toString().trim().toLowerCase();
        if (s.equals("true") || s.equals("1") || s.equals("yes")) return Boolean.TRUE;
        if (s.equals("false") || s.equals("0") || s.equals("no")) return Boolean.FALSE;
        return null;
    }

    /**
     * H·ªßy ki·ªÉm k√™
     * PUT /api/v1/quan-ly-kiem-ke/huy-kiem-ke
     */
    // [ƒê√É S·ª¨A] Ph∆∞∆°ng th·ª©c POST -> PUT, ƒë∆∞·ªùng d·∫´n v√† c·∫•u tr√∫c request
    @PutMapping("/huy-kiem-ke")
    public ResponseEntity<Map<String, Object>> cancelInventoryCheck(@RequestBody Map<String, Object> request) {
        Map<String, Object> response = new HashMap<>();
        try {
            Integer maKiemKe = (Integer) request.get("maKiemKe");
            String lyDo = (String) request.get("lyDo");

            boolean success = quanLyKiemKeService.cancelInventoryCheck(maKiemKe, lyDo);

            if (success) {
                response.put("success", true);
                response.put("message", "H·ªßy ki·ªÉm k√™ th√†nh c√¥ng");
                return ResponseEntity.ok(response);
            } else {
                response.put("success", false);
                response.put("message", "H·ªßy ki·ªÉm k√™ th·∫•t b·∫°i");
                return ResponseEntity.badRequest().body(response);
            }
        } catch (Exception e) {
            response.put("success", false);
            response.put("message", "L·ªói: " + e.getMessage());
            return ResponseEntity.internalServerError().body(response);
        }
    }

    // =================== QUERY OPERATIONS ===================

    /**
     * L·∫•y danh s√°ch phi·∫øu ki·ªÉm k√™ theo tr·∫°ng th√°i
     * GET /api/v1/quan-ly-kiem-ke/kiem-ke-theo-trang-thai?trangThai=...
     */
    // [ƒê√É S·ª¨A] ƒê∆∞·ªùng d·∫´n v√† ki·ªÉu tham s·ªë @PathVariable -> @RequestParam
    @GetMapping("/kiem-ke-theo-trang-thai")
    public ResponseEntity<Map<String, Object>> getInventoryChecksByStatus(@RequestParam(name = "trangThai") String trangThai) {
        Map<String, Object> response = new HashMap<>();
        try {
            KiemKeKho.TrangThaiKiemKe trangThaiEnum = KiemKeKho.TrangThaiKiemKe.valueOf(trangThai.toUpperCase());
            List<KiemKeKho> inventoryChecks = quanLyKiemKeService.getInventoryChecksByStatus(trangThaiEnum);
            
            response.put("success", true);
            response.put("data", inventoryChecks);
            response.put("count", inventoryChecks.size());
            return ResponseEntity.ok(response);
        } catch (Exception e) {
            response.put("success", false);
            response.put("message", "L·ªói: " + e.getMessage());
            return ResponseEntity.internalServerError().body(response);
        }
    }

    /**
     * L·∫•y danh s√°ch phi·∫øu ki·ªÉm k√™ ƒëang ho·∫°t ƒë·ªông
     * GET /api/v1/quan-ly-kiem-ke/kiem-ke-dang-hoat-dong
     */
    // [ƒê√É S·ª¨A] ƒê∆∞·ªùng d·∫´n
    @GetMapping("/kiem-ke-dang-hoat-dong")
    public ResponseEntity<Map<String, Object>> getActiveInventoryChecks() {
        // ... implementation is ok
        Map<String, Object> response = new HashMap<>();
        try {
            List<KiemKeKho> inventoryChecks = quanLyKiemKeService.getActiveInventoryChecks();
            response.put("success", true);
            response.put("data", inventoryChecks);
            response.put("count", inventoryChecks.size());
            return ResponseEntity.ok(response);
        } catch (Exception e) {
            response.put("success", false);
            response.put("message", "L·ªói: " + e.getMessage());
            return ResponseEntity.internalServerError().body(response);
        }
    }

    // Backwards-compatible: /danh-sach -> list active inventory checks
    @GetMapping("/danh-sach")
    public ResponseEntity<Map<String, Object>> getInventoryListAlias() {
        return getActiveInventoryChecks();
    }

    /**
     * L·∫•y chi ti·∫øt ki·ªÉm k√™
     * GET /api/v1/quan-ly-kiem-ke/chi-tiet-kiem-ke/{maKiemKe}
     */
    // [ƒê√É S·ª¨A] ƒê∆∞·ªùng d·∫´n
    @GetMapping("/chi-tiet-kiem-ke/{maKiemKe}")
    public ResponseEntity<Map<String, Object>> getInventoryCheckDetails(@PathVariable Integer maKiemKe) {
        // ... implementation is ok
        Map<String, Object> response = new HashMap<>();
        try {
            List<KiemKeChiTiet> details = quanLyKiemKeService.getInventoryCheckDetails(maKiemKe);
            response.put("success", true);
            response.put("data", details);
            response.put("count", details.size());
            return ResponseEntity.ok(response);
        } catch (Exception e) {
            response.put("success", false);
            response.put("message", "L·ªói: " + e.getMessage());
            return ResponseEntity.internalServerError().body(response);
        }
    }

    // Backwards-compatible: /chi-tiet/{maKiemKe}
    @GetMapping("/chi-tiet/{maKiemKe}")
    public ResponseEntity<Map<String, Object>> getInventoryCheckDetailsAlias(@PathVariable Integer maKiemKe) {
        return getInventoryCheckDetails(maKiemKe);
    }

    /**
     * L·∫•y s·∫£n ph·∫©m c√≥ ch√™nh l·ªách
     * GET /api/v1/quan-ly-kiem-ke/san-pham-chenh-lech/{maKiemKe}
     */
    // [ƒê√É S·ª¨A] ƒê∆∞·ªùng d·∫´n
    @GetMapping("/san-pham-chenh-lech/{maKiemKe}")
    public ResponseEntity<Map<String, Object>> getProductsWithDifferences(@PathVariable Integer maKiemKe) {
        // ... implementation is ok
        Map<String, Object> response = new HashMap<>();
        try {
            List<KiemKeChiTiet> differences = quanLyKiemKeService.getProductsWithDifferences(maKiemKe);
            response.put("success", true);
            response.put("data", differences);
            response.put("count", differences.size());
            return ResponseEntity.ok(response);
        } catch (Exception e) {
            response.put("success", false);
            response.put("message", "L·ªói: " + e.getMessage());
            return ResponseEntity.internalServerError().body(response);
        }
    }

    /**
     * L·∫•y s·∫£n ph·∫©m thi·∫øu h√†ng
     * GET /api/v1/quan-ly-kiem-ke/san-pham-thieu/{maKiemKe}
     */
    // [ƒê√É S·ª¨A] ƒê∆∞·ªùng d·∫´n
    @GetMapping("/san-pham-thieu/{maKiemKe}")
    public ResponseEntity<Map<String, Object>> getShortageProducts(@PathVariable Integer maKiemKe) {
        // ... implementation is ok
        Map<String, Object> response = new HashMap<>();
        try {
            List<KiemKeChiTiet> shortages = quanLyKiemKeService.getShortageProducts(maKiemKe);
            response.put("success", true);
            response.put("data", shortages);
            response.put("count", shortages.size());
            return ResponseEntity.ok(response);
        } catch (Exception e) {
            response.put("success", false);
            response.put("message", "L·ªói: " + e.getMessage());
            return ResponseEntity.internalServerError().body(response);
        }
    }

    /**
     * L·∫•y s·∫£n ph·∫©m th·ª´a h√†ng
     * GET /api/v1/quan-ly-kiem-ke/san-pham-thua/{maKiemKe}
     */
    // [ƒê√É S·ª¨A] ƒê∆∞·ªùng d·∫´n
    @GetMapping("/san-pham-thua/{maKiemKe}")
    public ResponseEntity<Map<String, Object>> getSurplusProducts(@PathVariable Integer maKiemKe) {
        // ... implementation is ok
        Map<String, Object> response = new HashMap<>();
        try {
            List<KiemKeChiTiet> surplus = quanLyKiemKeService.getSurplusProducts(maKiemKe);
            response.put("success", true);
            response.put("data", surplus);
            response.put("count", surplus.size());
            return ResponseEntity.ok(response);
        } catch (Exception e) {
            response.put("success", false);
            response.put("message", "L·ªói: " + e.getMessage());
            return ResponseEntity.internalServerError().body(response);
        }
    }

    /**
     * L·∫•y t·ªïng k·∫øt ki·ªÉm k√™
     * GET /api/v1/quan-ly-kiem-ke/tong-ket-kiem-ke/{maKiemKe}
     */
    // [ƒê√É S·ª¨A] ƒê∆∞·ªùng d·∫´n
    @GetMapping("/tong-ket-kiem-ke/{maKiemKe}")
    public ResponseEntity<Map<String, Object>> getInventoryCheckSummary(@PathVariable Integer maKiemKe) {
        // ... implementation is ok
        Map<String, Object> response = new HashMap<>();
        try {
            // Note: Service methods assumed to exist for this summary
            Object[] summary = quanLyKiemKeService.getInventoryCheckSummary(maKiemKe);
            response.put("success", true);
            response.put("data", summary);
            return ResponseEntity.ok(response);
        } catch (Exception e) {
            response.put("success", false);
            response.put("message", "L·ªói: " + e.getMessage());
            return ResponseEntity.internalServerError().body(response);
        }
    }

    /**
     * Th·ªëng k√™ ki·ªÉm k√™
     * GET /api/v1/quan-ly-kiem-ke/thong-ke-kiem-ke
     */
    // [ƒê√É S·ª¨A] ƒê∆∞·ªùng d·∫´n
    @GetMapping("/thong-ke-kiem-ke")
    public ResponseEntity<Map<String, Object>> getInventoryCheckStatistics() {
        // ... implementation is ok
        Map<String, Object> response = new HashMap<>();
        try {
            List<Object[]> stats = quanLyKiemKeService.getInventoryCheckStatistics();
            response.put("success", true);
            response.put("data", stats);
            return ResponseEntity.ok(response);
        } catch (Exception e) {
            response.put("success", false);
            response.put("message", "L·ªói: " + e.getMessage());
            return ResponseEntity.internalServerError().body(response);
        }
    }
}