package com.noithat.qlnt.backend.service.impl;

import com.noithat.qlnt.backend.dto.request.ChiTietDonHangRequest;
import com.noithat.qlnt.backend.dto.request.DonHangRequest;
import com.noithat.qlnt.backend.dto.response.ChiTietDonHangResponse;
import com.noithat.qlnt.backend.dto.response.DonHangResponse;
import com.noithat.qlnt.backend.dto.response.ThongKeBanHangResponse;
import com.noithat.qlnt.backend.entity.*;
import com.noithat.qlnt.backend.repository.*;
import com.noithat.qlnt.backend.service.DonHangService;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor
public class DonHangServiceImpl implements DonHangService {

    private final DonHangRepository donHangRepository;
    private final KhachHangRepository khachHangRepository;
    // X√≥a SanPhamRepository kh√¥ng c·∫ßn thi·∫øt v√† th√™m BienTheSanPhamRepository
    private final BienTheSanPhamRepository bienTheSanPhamRepository;
    private final ChiTietDonHangRepository chiTietDonHangRepository;
    private final VoucherRepository voucherRepository;

    @Override
    @Transactional
    public DonHangResponse taoDonHang(DonHangRequest request) {
        // üîπ L·∫•y th√¥ng tin kh√°ch h√†ng
        KhachHang khachHang = khachHangRepository.findById(request.getMaKhachHang())
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y kh√°ch h√†ng."));

        // üîπ T·∫°o ƒë∆°n h√†ng m·ªõi
        DonHang donHang = new DonHang();
        donHang.setKhachHang(khachHang);
        donHang.setTrangThai(request.getTrangThai());
        donHang.setPhuongThucThanhToan(request.getPhuongThucThanhToan());
        donHang.setGhiChu(request.getGhiChu());

        // üîπ N·∫øu c√≥ m√£ voucher
        BigDecimal giamGiaVoucher = BigDecimal.ZERO;
        if (request.getMaVoucher() != null) {
            Voucher voucher = voucherRepository.findById(request.getMaVoucher())
                    .orElseThrow(() -> new RuntimeException("Voucher kh√¥ng t·ªìn t·∫°i."));
            donHang.setVoucher(voucher);
            giamGiaVoucher = voucher.getGiaTriGiam() != null ? voucher.getGiaTriGiam() : BigDecimal.ZERO;
        }
        donHang.setGiamGiaVoucher(giamGiaVoucher);

        // üîπ X·ª≠ l√Ω chi ti·∫øt ƒë∆°n h√†ng
        List<ChiTietDonHang> chiTietList = new ArrayList<>();
        BigDecimal tongTienGoc = BigDecimal.ZERO;

        for (ChiTietDonHangRequest ctReq : request.getChiTietDonHangList()) {
            BienTheSanPham bienThe = bienTheSanPhamRepository.findById(ctReq.getMaBienThe())
                    .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y bi·∫øn th·ªÉ s·∫£n ph·∫©m."));

            ChiTietDonHang chiTiet = new ChiTietDonHang();
            chiTiet.setBienThe(bienThe);
            chiTiet.setSoLuong(ctReq.getSoLuong());

            BigDecimal donGia = bienThe.getGiaBan();
            chiTiet.setDonGiaThucTe(donGia);

            BigDecimal thanhTien = donGia.multiply(BigDecimal.valueOf(ctReq.getSoLuong()));
            tongTienGoc = tongTienGoc.add(thanhTien);

            chiTiet.setDonHang(donHang); // ‚ö†Ô∏è li√™n k·∫øt ng∆∞·ª£c b·∫Øt bu·ªôc
            chiTietList.add(chiTiet);
        }

        // üîπ T√≠nh t·ªïng ti·ªÅn v√† th√†nh ti·ªÅn sau gi·∫£m gi√°
        donHang.setTongTienGoc(tongTienGoc);
        donHang.setThanhTien(tongTienGoc.subtract(giamGiaVoucher));

        // üîπ G·∫Øn danh s√°ch chi ti·∫øt v√†o ƒë∆°n h√†ng
        donHang.setChiTietDonHangs(chiTietList);

        // üîπ L∆∞u ƒë∆°n h√†ng v√† chi ti·∫øt
        donHangRepository.save(donHang);

        // ‚úÖ Tr·∫£ v·ªÅ response
        return mapToResponse(donHang);
    }


    @Override
    public DonHangResponse getDonHangById(Integer id) {
        DonHang donHang = donHangRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng v·ªõi m√£: " + id));
        return mapToResponse(donHang);
    }

    @Override
    public List<DonHangResponse> getTatCaDonHang() {
        return donHangRepository.findAll().stream()
                .map(this::mapToResponse)
                .collect(Collectors.toList());
    }


    @Override
    public void capNhatTrangThai(Integer id, String trangThai) {
        DonHang donHang = donHangRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng v·ªõi m√£: " + id));
        donHang.setTrangThai(trangThai);
        donHangRepository.save(donHang);
    }

    @Override
    public ThongKeBanHangResponse thongKeBanHang() {
        // ƒê·∫øm t·ªïng s·ªë ƒë∆°n h√†ng
        long tongDonHang = donHangRepository.count();

        // ƒê·∫øm theo tr·∫°ng th√°i
        long choXuLy = donHangRepository.findAll().stream()
                .filter(dh -> "Ch·ªù x·ª≠ l√Ω".equalsIgnoreCase(dh.getTrangThai()))
                .count();

        long hoanThanh = donHangRepository.findAll().stream()
                .filter(dh -> "Ho√†n th√†nh".equalsIgnoreCase(dh.getTrangThai()))
                .count();

        // T√≠nh doanh thu (l·ªçc null)
        BigDecimal doanhThuHomNay = donHangRepository.findAll().stream()
                .map(DonHang::getThanhTien)
                .filter(Objects::nonNull)
                .reduce(BigDecimal.ZERO, BigDecimal::add);

        // G√°n d·ªØ li·ªáu v√†o DTO
        ThongKeBanHangResponse response = new ThongKeBanHangResponse();
        response.setTongDonHang(tongDonHang);
        response.setChoXuLy(choXuLy);
        response.setHoanThanh(hoanThanh);
        response.setDoanhThuHomNay(doanhThuHomNay);

        return response;
    }


    @Override
    public void xoaDonHang(Integer id) {
        DonHang donHang = donHangRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng v·ªõi m√£: " + id));
        donHangRepository.delete(donHang);
    }

    // =================== PRIVATE MAPPER ===================
        // L·∫•y danh s√°ch chi ti·∫øt ƒë∆°n h√†ng tr·ª±c ti·∫øp t·ª´ quan h·ªá trong entity DonHang
        // ƒêi·ªÅu n√†y y√™u c·∫ßu b·∫°n ph·∫£i ƒë·ªãnh nghƒ©a ƒë√∫ng quan h·ªá @OneToMany trong entity DonHang
    private DonHangResponse mapToResponse(DonHang donHang) {
        DonHangResponse response = new DonHangResponse();
            // ... c√°c d√≤ng code g√°n m√£ ƒë∆°n h√†ng, t√™n kh√°ch h√†ng, v.v...
        response.setMaDonHang(donHang.getMaDonHang());
        response.setTenKhachHang(donHang.getKhachHang().getHoTen());
        response.setNgayDatHang(donHang.getNgayDatHang());
        response.setThanhTien(donHang.getThanhTien());
        response.setTrangThai(donHang.getTrangThai());
        response.setVoucherCode(
        donHang.getVoucher() != null ? String.valueOf(donHang.getVoucher().getMaVoucher()) : null
        );

            // S·ª¨A L·∫†I LOGIC B√äN TRONG H√ÄM MAP
            List<ChiTietDonHangResponse> chiTietList = donHang.getChiTietDonHangs().stream()
                    .map(ct -> {
                        // L·∫•y ra c√°c th√¥ng tin c·∫ßn thi·∫øt t·ª´ chi ti·∫øt ƒë∆°n h√†ng (ct)
                        BienTheSanPham bienThe = ct.getBienThe();
                        SanPham sanPham = bienThe.getSanPham();
                        int soLuong = ct.getSoLuong();
                        BigDecimal donGia = ct.getDonGiaThucTe();

                        // T√≠nh to√°n th√†nh ti·ªÅn cho t·ª´ng d√≤ng s·∫£n ph·∫©m
                        BigDecimal thanhTien = donGia.multiply(BigDecimal.valueOf(soLuong));

                        // G·ªçi constructor v·ªõi ƒë·ªß 5 tham s·ªë
                        return new ChiTietDonHangResponse(
                                sanPham.getTenSanPham(),   // 1. tenSanPham (String)
                                bienThe.getSku(),          // 2. sku (String)
                                soLuong,                   // 3. soLuong (int)
                                donGia,                    // 4. donGia (BigDecimal)
                                thanhTien                  // 5. thanhTien (BigDecimal)
                        );
                    }).collect(Collectors.toList());
            
            response.setChiTietDonHangList(chiTietList);
            return response;
    }
}