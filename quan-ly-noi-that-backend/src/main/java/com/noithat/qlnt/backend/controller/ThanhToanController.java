package com.noithat.qlnt.backend.controller;

import com.noithat.qlnt.backend.dto.request.ThanhToanRequest;
import com.noithat.qlnt.backend.dto.request.ThemGiaoDichRequest;
import com.noithat.qlnt.backend.dto.request.ThongTinGiaoHangRequest;
import com.noithat.qlnt.backend.dto.response.ThanhToanChiTietResponse;
import com.noithat.qlnt.backend.dto.response.ThanhToanResponse;
import com.noithat.qlnt.backend.dto.response.ThongKeThanhToanResponse;
import com.noithat.qlnt.backend.service.ThanhToanService;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Map;

@RestController
@RequestMapping("/api/thanhtoan")
@RequiredArgsConstructor
public class ThanhToanController {

    private final ThanhToanService thanhToanService;

    /**
     * API ƒë·ªÉ l·∫•y d·ªØ li·ªáu cho 4 th·∫ª th·ªëng k√™ ·ªü tr√™n c√πng.
     * @return D·ªØ li·ªáu th·ªëng k√™.
     */
    @GetMapping("/thongke")
    public ResponseEntity<ThongKeThanhToanResponse> getThongKeThanhToan() {
        return ResponseEntity.ok(thanhToanService.getThongKe());
    }

    /**
     * API ƒë·ªÉ l·∫•y danh s√°ch giao d·ªãch, c√≥ h·ªó tr·ª£ l·ªçc theo tr·∫°ng th√°i v√† ph∆∞∆°ng th·ª©c.
     * @param trangThai Tr·∫°ng th√°i c·∫ßn l·ªçc (v√≠ d·ª•: "Ho√†n th√†nh"). T√πy ch·ªçn.
     * @param phuongThuc Ph∆∞∆°ng th·ª©c thanh to√°n c·∫ßn l·ªçc (v√≠ d·ª•: "Ti·ªÅn m·∫∑t"). T√πy ch·ªçn.
     * @return Danh s√°ch c√°c giao d·ªãch thanh to√°n ƒë√£ ƒë∆∞·ª£c l·ªçc.
     */
    @GetMapping
    public ResponseEntity<List<ThanhToanResponse>> getTatCaThanhToan(
            @RequestParam(required = false) String trangThai,
            @RequestParam(required = false) String phuongThuc) {
        return ResponseEntity.ok(thanhToanService.getAllThanhToan(trangThai, phuongThuc));
    }

    /**
     * API ƒë·ªÉ xem chi ti·∫øt m·ªôt giao d·ªãch (d√πng cho pop-up chi ti·∫øt).
     * @param id M√£ c·ªßa giao d·ªãch c·∫ßn xem.
     * @return D·ªØ li·ªáu chi ti·∫øt c·ªßa giao d·ªãch.
     */
    @GetMapping("/{id}")
    public ResponseEntity<ThanhToanChiTietResponse> getThanhToanById(@PathVariable Integer id) {
        return ResponseEntity.ok(thanhToanService.getThanhToanById(id));
    }

    /**
     * API ƒë·ªÉ l·∫•y t·∫•t c·∫£ c√°c giao d·ªãch c·ªßa m·ªôt ƒë∆°n h√†ng c·ª• th·ªÉ.
     * @param maDonHang M√£ c·ªßa ƒë∆°n h√†ng.
     * @return Danh s√°ch c√°c giao d·ªãch thu·ªôc ƒë∆°n h√†ng ƒë√≥.
     */
    @GetMapping("/donhang/{maDonHang}")
    public ResponseEntity<List<ThanhToanResponse>> getThanhToanByDonHang(@PathVariable Integer maDonHang) {
        return ResponseEntity.ok(thanhToanService.getByDonHang(maDonHang));
    }

    /**
     * API ƒë·ªÉ t·∫°o m·ªôt giao d·ªãch thanh to√°n m·ªõi.
     * @param request D·ªØ li·ªáu giao d·ªãch m·ªõi t·ª´ form.
     * @return Chi ti·∫øt c·ªßa giao d·ªãch v·ª´a ƒë∆∞·ª£c t·∫°o.
     */
    @PostMapping
    public ResponseEntity<ThanhToanChiTietResponse> themGiaoDichMoi(@Valid @RequestBody ThemGiaoDichRequest request) {
        return ResponseEntity.ok(thanhToanService.themMoiGiaoDich(request));
    }

    /**
     * API ƒë·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i c·ªßa m·ªôt giao d·ªãch.
     * @param id M√£ c·ªßa giao d·ªãch c·∫ßn c·∫≠p nh·∫≠t.
     * @param body Request body c√≥ d·∫°ng: { "trangThai": "Ho√†n th√†nh" }.
     * @return D·ªØ li·ªáu c·ªßa giao d·ªãch sau khi ƒë√£ c·∫≠p nh·∫≠t.
     */
    @PatchMapping("/{id}/trangthai")
    public ResponseEntity<ThanhToanResponse> capNhatTrangThai(
            @PathVariable Integer id,
            @RequestBody Map<String, String> body) {
        String newStatus = body.get("trangThai");
        if (newStatus == null || newStatus.trim().isEmpty()) {
            // Tr·∫£ v·ªÅ l·ªói 400 n·∫øu kh√¥ng c√≥ 'trangThai' trong body
            return ResponseEntity.badRequest().build();
        }
        return ResponseEntity.ok(thanhToanService.updateTrangThai(id, newStatus));
    }

    @PostMapping("/xem-gio-hang")
    public ResponseEntity<?> xemGioHang(@RequestBody List<ThanhToanRequest> dsSanPham) {
        try {
            return ResponseEntity.ok(thanhToanService.xemGioHang(dsSanPham));
        } catch (Exception e) {
            return ResponseEntity.badRequest().body("L·ªói khi xem gi·ªè h√†ng: " + e.getMessage());
        }
    }

    // üöö B∆∞·ªõc 2: Nh·∫≠p th√¥ng tin giao h√†ng
    @PostMapping("/thong-tin-giao-hang")
    public ResponseEntity<String> thongTinGiaoHang(@RequestBody ThongTinGiaoHangRequest request) {
        return ResponseEntity.ok("ƒê√£ nh·∫≠n th√¥ng tin giao h√†ng: " + request.getDiaChiGiaoHang());
    }

    @PostMapping("/tao-don-hang")
    public ResponseEntity<ThanhToanResponse> taoDonHangTuUser(@RequestBody ThongTinGiaoHangRequest request) {
        ThanhToanResponse resp = thanhToanService.taoDonHangTuUser(request);
        return ResponseEntity.ok(resp);
    }
}